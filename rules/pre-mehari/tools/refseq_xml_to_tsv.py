"""Convert RefSeq gene XML file (as generated by gene2xml) to a TSV file containing the Entrez
summary.
"""

import argparse
import csv
import gzip
import sys
import xml.etree.ElementTree as ET


#: Header for the gene summary file.
HEADER_SUMMARY = ("entrez_id", "summary")
#: Header for the gene RIF file
HEADER_GENERIF = ("entrez_id", "rif_text", "pubmed_ids")


def extract_summary_process_entrezgene(elem_entrezgene, writer):
    """Process one <Entrezgene> element, write out Entrez gene ID and Entrez summary."""
    # import ipdb; ipdb.set_trace()
    elem_geneid = elem_entrezgene.find(".//Gene-track_geneid")
    if elem_geneid is None:
        gene_id = ""
    else:
        gene_id = elem_geneid.text
    elem_summary = elem_entrezgene.find(".//Entrezgene_summary")
    if elem_summary is None:
        summary = ""
    else:
        summary = elem_summary.text
    if not gene_id and summary:
        print("WARNING: found no gene_id but summary: {}".format(summary), file=sys.stderr)
    else:
        writer.writerow([gene_id, summary])


def extract_generif_process_entrezgene(elem_entrezgene, writer):
    """Process one <Entrezgene> element, write out Entrez gene ID and Entrez summary."""
    # import ipdb; ipdb.set_trace()
    elem_geneid = elem_entrezgene.find(".//Gene-track_geneid")
    if elem_geneid is None:
        gene_id = ""
    else:
        gene_id = elem_geneid.text
    # import ipdb; ipdb.set_trace()
    for elem_commentary in elem_entrezgene.findall("./Entrezgene_comments/Gene-commentary"):
        if elem_commentary.find(".//Gene-commentary_type[@value='generif']") is not None:
            elem_heading = elem_commentary.find("./Gene-commentary_heading")
            if elem_heading is not None and elem_heading.text == "Interactions":
                continue  # skip, too noisy for our purposes
            elem_text = elem_commentary.find("./Gene-commentary_text")
            elem_refs = "{%s}" % ",".join(
                [
                    ref.text
                    for ref in elem_commentary.findall(
                        "./Gene-commentary_refs/Pub/Pub_pmid/PubMedId"
                    )
                ]
            )
            if elem_text is not None:
                writer.writerow([gene_id, elem_text.text, elem_refs])


extract_summary_process_entrezgene.header = HEADER_SUMMARY
extract_generif_process_entrezgene.header = HEADER_GENERIF


def run(input, output, process_entrezgene):
    """Read in XML file and write out TSV with summary information."""
    writer = csv.writer(output, dialect="excel-tab")
    writer.writerow(process_entrezgene.header)
    for event, elem in ET.iterparse(input):
        if elem.tag == "Entrezgene" and event == "end":
            process_entrezgene(elem, writer)
            elem.clear()
            output.flush()


def main(argv=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("--input", help="Path to input file", required=True)
    parser.add_argument("--output", help="Path to output file", required=True)
    parser.add_argument(
        "--info-type",
        help="Information types to extract",
        choices=("summary", "generif"),
        required=True,
    )
    args = parser.parse_args(argv)
    if args.input.endswith(".gz"):
        inputf = gzip.open(args.input, "rt")
    else:
        inputf = open(args.input, "rt")
    if args.output.endswith(".gz"):
        outputf = gzip.open(args.output, "wt")
    else:
        outputf = open(args.output, "wt")
    with inputf, outputf:
        proc_funcs = {
            "summary": extract_summary_process_entrezgene,
            "generif": extract_generif_process_entrezgene,
        }
        run(inputf, outputf, proc_funcs[args.info_type])


if __name__ == "__main__":
    sys.exit(main())
