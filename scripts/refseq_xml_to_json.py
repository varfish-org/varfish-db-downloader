"""Convert RefSeq gene XML file (as generated by gene2xml) to a TSV file containing the Entrez
summary.
"""

import json
import sys
import typing
import xml.etree.ElementTree as ET

import attrs
import cattrs


@attrs.frozen
class RifEntry:
    """A referenc einto function entry."""

    text: str
    pmids: typing.List[str]


@attrs.frozen
class Gene:
    """A gene as stored by NCBI/Entrez."""

    gene_id: str
    summary: str
    rif_entries: typing.List[RifEntry]


def process_entrezgene(elem_entrezgene, outfile):
    # Extract basic gene information.
    elem_geneid = elem_entrezgene.find(".//Gene-track_geneid")
    if elem_geneid is None:
        gene_id = ""
    else:
        gene_id = elem_geneid.text
    elem_summary = elem_entrezgene.find(".//Entrezgene_summary")
    if elem_summary is None:
        summary = ""
    else:
        summary = elem_summary.text

    # Extract RIF (reference into function) information.
    rif_entries = []
    for elem_commentary in elem_entrezgene.findall("./Entrezgene_comments/Gene-commentary"):
        if elem_commentary.find(".//Gene-commentary_type[@value='generif']") is not None:
            elem_heading = elem_commentary.find("./Gene-commentary_heading")
            if elem_heading is not None and elem_heading.text == "Interactions":
                continue  # skip, too noisy for our purposes
            elem_text = elem_commentary.find("./Gene-commentary_text")
            text = elem_text.text if elem_text is not None else ""
            pmids = [
                ref.text
                for ref in elem_commentary.findall("./Gene-commentary_refs/Pub/Pub_pmid/PubMedId")
            ]
            rif_entries.append(
                RifEntry(
                    text=text,
                    pmids=pmids,
                )
            )

    if gene_id and (summary or rif_entries):
        gene = Gene(gene_id=gene_id, summary=summary, rif_entries=rif_entries)
        print(json.dumps(cattrs.unstructure(gene)), file=outfile)


def main(argv=None):
    for event, elem in ET.iterparse(sys.stdin):
        if elem.tag == "Entrezgene" and event == "end":
            process_entrezgene(elem, sys.stdout)
            elem.clear()
            sys.stdout.flush()


if __name__ == "__main__":
    sys.exit(main())
